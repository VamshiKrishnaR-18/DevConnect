"use client" import * as React from "react" import useEmblaCarousel, {\n type UseEmblaCarouselType,\n} from "embla-carousel-react@8.6.0" import {\n ArrowLeft, ArrowRight\n} from "lucide-react@0.487.0" import {\n cn\n} from "./utils" import {\n Button\n} from "./button"; type CarouselApi = UseEmblaCarouselType[1]; type UseCarouselParameters = Parameters; type CarouselOptions = UseCarouselParameters[0]; type CarouselPlugin = UseCarouselParameters[1]; type CarouselProps = {\n opts: CarouselOptions; plugins: CarouselPlugin; orientation: "horizontal" | "vertical"; setApi: (api: CarouselApi) => void;\n}; type CarouselContextProps = {\n carouselRef: ReturnType[0]; api: ReturnType[1]; scrollPrev: () => void; scrollNext: () => void; canScrollPrev; canScrollNext;\n} & CarouselProps const CarouselContext = React.createContext(null) function useCarousel() {\n \n const context = React.useContext(CarouselContext); if (!context) {\n \n throw new Error("useCarousel must be used within a ");\n} return context;\n} function Carousel({\n orientation = "horizontal", opts, setApi, plugins, className, children, ...props\n} & CarouselProps) {\n \n const [carouselRef, api] = useEmblaCarousel({\n ...opts, axis: orientation === "horizontal" ? "x" : "y",\n}, plugins, ) const [canScrollPrev, setCanScrollPrev] = React.useState(false) const [canScrollNext, setCanScrollNext] = React.useState(false) const onSelect = React.useCallback((api: CarouselApi) => {\n if (!api) return; setCanScrollPrev(api.canScrollPrev()); setCanScrollNext(api.canScrollNext());\n}, []) const scrollPrev = React.useCallback(() => {\n api?.scrollPrev();\n}, [api]) const scrollNext = React.useCallback(() => {\n api?.scrollNext();\n}, [api]) const handleKeyDown = React.useCallback( (event) => {\n if (event.key === "ArrowLeft") {\n \n event.preventDefault(); scrollPrev();\n} else if (event.key === "ArrowRight") {\n \n event.preventDefault(); scrollNext();\n}\n}, [scrollPrev, scrollNext], ); React.useEffect(() => {\n if (!api || !setApi) return; setApi(api);\n}, [api, setApi]); React.useEffect(() => {\n if (!api) return; onSelect(api); api.on("reInit", onSelect); api.on("select", onSelect);\n return () => {\n api?.off("select", onSelect);\n};\n}, [api, onSelect]);\n return ( {children} );\n} function CarouselContent({\n className, ...props\n}) {\n \n const {\n carouselRef, orientation\n} = useCarousel();\n return ( );\n} function CarouselItem({\n className, ...props\n}) {\n \n const {\n orientation\n} = useCarousel();\n return ( );\n} function CarouselPrevious({\n className, variant = "outline", size = "icon", ...props\n}) {\n \n const {\n orientation, scrollPrev, canScrollPrev\n} = useCarousel();\n return ( Previous slide );\n} function CarouselNext({\n className, variant = "outline", size = "icon", ...props\n}) {\n \n const {\n orientation, scrollNext, canScrollNext\n} = useCarousel();\n return ( Next slide );\n} export {\n type CarouselApi, Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext,\n}; 
