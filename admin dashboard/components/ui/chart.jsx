"use client" import * as React from "react" import * as RechartsPrimitive from "recharts@2.15.2" import {\n cn\n} from "./utils"; // Format: {\n THEME_NAME: CSS_SELECTOR\n} const THEMES = {\n light: "", dark: ".dark"\n} as const export type ChartConfig = {\n [k in string]: {\n label: React.ReactNode; icon: React.ComponentType;\n} & ( | {\n color?; theme: never\n} | {\n color: never; theme: Record\n});\n}; type ChartContextProps = {\n config: ChartConfig;\n} const ChartContext = React.createContext(null) function useChart() {\n \n const context = React.useContext(ChartContext); if (!context) {\n \n throw new Error("useChart must be used within a ");\n} return context;\n} function ChartContainer({\n id, className, children, config, ...props\n}) {\n \n const uniqueId = React.useId() const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;\n return ( {children} );\n} const ChartStyle = ({\n id, config\n}: {\n id; config: ChartConfig\n}) => {\n const colorConfig = Object.entries(config).filter( ([, config]) => config.theme || config.color, ); if (!colorConfig.length) {\n \n return null;\n} return ( ` ${prefix} [data-chart=${id}] {\n ${colorConfig .map(([key, itemConfig]) => {\n const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;\n return color ? ` --color-${key}: ${color};` : null;\n}) .join("\n")}\n} `, ) .join("\n"),\n}} /> );\n} const ChartTooltip = RechartsPrimitive.Tooltip function ChartTooltipContent({\n active, payload, className, indicator = "dot", hideLabel = false, hideIndicator = false, label, labelFormatter, labelClassName, formatter, color, nameKey, labelKey,\n} & React.ComponentProps ) {\n \n const {\n config\n} = useChart() const tooltipLabel = React.useMemo(() => {\n if (hideLabel || !payload?.length) {\n \n return null;\n} const [item] = payload const key = `${labelKey || item?.dataKey || item?.name || "value"}` const itemConfig = getPayloadConfigFromPayload(config, item, key) const value = !labelKey && typeof label === "string" ? config[label as keyof typeof config]?.label || label : itemConfig?.label; if (labelFormatter) {\n \n return ( {labelFormatter(value, payload)} );\n} if (!value) {\n \n return null;\n} return {value};\n}, [ label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey, ]); if (!active || !payload?.length) {\n \n return null;\n} const nestLabel = payload.length === 1 && indicator !== "dot";\n return ( {!nestLabel ? tooltipLabel : null} {payload.map((item, index) => {\n const key = `${nameKey || item.name || item.dataKey || "value"}` const itemConfig = getPayloadConfigFromPayload(config, item, key) const indicatorColor = color || item.payload.fill || item.color;\n return ( svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5", indicator === "dot" && "items-center", )} > {formatter && item?.value !== undefined && item.name ? ( formatter(item.value, item.name, item, index, item.payload) ) : ( {itemConfig?.icon ? ( ) : ( !hideIndicator && ( ) )} {nestLabel ? tooltipLabel : null} {itemConfig?.label || item.name} {item.value && ( {item.value.toLocaleString()} )} )} );\n})} );\n} const ChartLegend = RechartsPrimitive.Legend function ChartLegendContent({\n className, hideIcon = false, payload, verticalAlign = "bottom", nameKey,\n} & Pick ) {\n \n const {\n config\n} = useChart(); if (!payload?.length) {\n \n return null;\n} return ( {payload.map((item) => {\n const key = `${nameKey || item.dataKey || "value"}` const itemConfig = getPayloadConfigFromPayload(config, item, key);\n return ( svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3", )} > {itemConfig?.icon && !hideIcon ? ( ) : ( )} {itemConfig?.label} );\n})} );\n} // Helper to extract item config from a payload. function getPayloadConfigFromPayload( config: ChartConfig, payload: unknown, key, ) {\n \n if (typeof payload !== "object" || payload === null) {\n \n return undefined;\n} const payloadPayload = "payload" in payload && typeof payload.payload === "object" && payload.payload !== null ? payload.payload : undefined; let configLabelKey = key; if ( key in payload && typeof payload[key as keyof typeof payload] === "string" ) {\n \n configLabelKey = payload[key as keyof typeof payload] as string;\n} else if ( payloadPayload && key in payloadPayload && typeof payloadPayload[key as keyof typeof payloadPayload] === "string" ) {\n \n configLabelKey = payloadPayload[ key as keyof typeof payloadPayload ] as string;\n} return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config];\n} export {\n ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent, ChartStyle,\n}; 
